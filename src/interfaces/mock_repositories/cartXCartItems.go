// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repositories/cartXCartItems.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/itsmeadi/cart/src/entities/models"
	reflect "reflect"
)

// MockCartXCartItems is a mock of CartXCartItems interface
type MockCartXCartItems struct {
	ctrl     *gomock.Controller
	recorder *MockCartXCartItemsMockRecorder
}

// MockCartXCartItemsMockRecorder is the mock recorder for MockCartXCartItems
type MockCartXCartItemsMockRecorder struct {
	mock *MockCartXCartItems
}

// NewMockCartXCartItems creates a new mock instance
func NewMockCartXCartItems(ctrl *gomock.Controller) *MockCartXCartItems {
	mock := &MockCartXCartItems{ctrl: ctrl}
	mock.recorder = &MockCartXCartItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCartXCartItems) EXPECT() *MockCartXCartItemsMockRecorder {
	return m.recorder
}

// GetCartItemsByUserAndProductId mocks base method
func (m *MockCartXCartItems) GetCartItemsByUserAndProductId(ctx context.Context, userId, productId int64, cartStatus, itemStatus int) ([]models.CartXCartItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByUserAndProductId", ctx, userId, productId, cartStatus, itemStatus)
	ret0, _ := ret[0].([]models.CartXCartItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByUserAndProductId indicates an expected call of GetCartItemsByUserAndProductId
func (mr *MockCartXCartItemsMockRecorder) GetCartItemsByUserAndProductId(ctx, userId, productId, cartStatus, itemStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByUserAndProductId", reflect.TypeOf((*MockCartXCartItems)(nil).GetCartItemsByUserAndProductId), ctx, userId, productId, cartStatus, itemStatus)
}

// GetCartItemsByUser mocks base method
func (m *MockCartXCartItems) GetCartItemsByUser(ctx context.Context, userId int64, cartStatus, itemStatus int) ([]models.CartXCartItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByUser", ctx, userId, cartStatus, itemStatus)
	ret0, _ := ret[0].([]models.CartXCartItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByUser indicates an expected call of GetCartItemsByUser
func (mr *MockCartXCartItemsMockRecorder) GetCartItemsByUser(ctx, userId, cartStatus, itemStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByUser", reflect.TypeOf((*MockCartXCartItems)(nil).GetCartItemsByUser), ctx, userId, cartStatus, itemStatus)
}
